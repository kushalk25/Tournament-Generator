package game;

public class League {

	private int vsNum;
	private Team[] teams;
	private Manager[] managers;
	private int participants;
	private Match[] allMatches;
	private int totalMatches;
	private Round[] rounds;
	private int matchesPerRound;
	private int numRounds;
	
	public League(Manager[] mans, int vsNumber) {
		// TODO Auto-generated constructor stub
		
		managers = mans;
		vsNum = vsNumber;
		
		participants = managers.length;
		teams = new Team[participants];
		
		
		for(int i = 0; i<participants; i++){
			teams[i] = managers[i].getTeam();
		}
		
		System.out.println("made teams in the league");
		
		totalMatches = choose(participants, 2);
		allMatches = new Match[totalMatches];
		
		matchesPerRound = participants/2;
		numRounds = (totalMatches/matchesPerRound)*vsNum;
		rounds = new Round[numRounds];
		
	}
	
	public Manager playLeague(){
		int team1 = 0;
		int team2 = 1;
		System.out.println("about to create matches");
		createMatches(team1, team2, 0);
		System.out.println("matches created");
		
		for(int i = 0; i<totalMatches; i++){
			System.out.println(allMatches[i].printTeams());
		}
		
		createRound();
		
		// print matches per round
		for(int i =0; i<numRounds; i++){
			System.out.println("Matches for round " + i);
			Match[] roundMatches = rounds[i].getMatches();
			for(int j = 0; j<matchesPerRound; j++){
				System.out.println(roundMatches[j].printTeams());
			}
		}
		
		
		return null;
		
	}

	private void createRound() {
		// TODO Auto-generated method stub
		int reverseIndex = totalMatches-1;
		
		for(int i = 0; i<numRounds; i++){
			System.out.println("Making Round " +i);
			rounds[i] = new Round(matchesPerRound, participants);
			int j = 0;
			int matchesSoFar = 0;
			// don't think i need both conditions
			while(j<=reverseIndex && (matchesSoFar < matchesPerRound)){
				if(rounds[i].validMatch(allMatches[j])){
					rounds[i].addMatch(allMatches[j]);
					matchesSoFar++;
					swap(j, reverseIndex);
					reverseIndex--;
				}else{
					j++;
				}
			}
			
		}
	}

	private void swap(int j, int r) {
		// TODO Auto-generated method stub
		Match temp = allMatches[r];
		allMatches[r] = allMatches[j];
		allMatches[j] = temp;
		
	}

	private void createMatches(int team1, int team2, int count) {
		// TODO Auto-generated method stub
		
		if(count<totalMatches){
			allMatches[count] = new Match(teams[team1], teams[team2]);
		
		
			count++;
			
			if(team2<(participants-1) && (team1 < participants-2)){
				team2++;
				createMatches(team1, team2, count);
			} else if(team2 == (participants-1) && (team1 < participants-2)){
				team1++;
				team2 = team1+1;
				createMatches(team1, team2, count);
			} else {
				System.out.println("Done Creating teams");
			}
		}
	}

	private int factorial(int num){
		System.out.println("factorial!");
		if(num >= 1){
			return 1;
		}
		
		return num * factorial(num-1); 
	}
	
	private int choose(int n, int k){
		System.out.println((factorial(n))/(factorial(n-k)*factorial(k)));
		return (factorial(n))/(factorial(n-k)*factorial(k));
	}
	
}
